@page "/login"
@layout CMS.WebAssembly.Layout.Admin.AccountLayout
@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Net.Http.Headers
@using CMS.Shared.DTOs.Au.Request
@using CMS.WEB.Common
@using CMS.WebAssembly.Common
@using KLPVN.Core.Helper
@inject IHttpClientFactory Factory
@using KLPVN.Core.Models

<style>
    .mud-main-content{
        padding: 0px !important;
        margin: 0px !important;
    }

    .limiter {
        width: 100%;
        margin: 0 auto;
    }

    .container-login100 {
        width: 100%;
        min-height: 100vh;
        display: -webkit-box;
        display: -webkit-flex;
        display: -moz-box;
        display: -ms-flexbox;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        padding: 15px;
        background-repeat: no-repeat;
        background-position: center;
        background-size: cover;
        position: relative;
        z-index: 1;
    }

    .container-login100::before {
        content: "";
        display: block;
        position: absolute;
        z-index: -1;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        background-color: rgba(0,0,0,0.65);
    }

    .login100-form-title {
        font-family: Ubuntu-Bold;
        font-size: 28px;
        color: #fff;
        line-height: 1.2;
        text-align: center;
        text-transform: uppercase;
        display: block;
        padding-bottom: 30px;
    }

    .center-image {
        display: block;
        margin: 0 auto;
    }

    .login100-form {
        width: 100%;
        border-radius: 10px;
        background-color: #fff;
    }

    .wrap-login100 {
        width: 390px;
        border-radius: 10px;
        overflow: hidden;
        background: transparent;
    }
</style>
@if (!isPageReady)
{
    <p>Loading...</p>
}
else
{
    <div class="limiter">
        <div class="container-login100">
            <div class="wrap-login100">
                <span class="login100-form-title p-b-41">
                    Đăng nhập
                </span>
                <MudPaper Elevation="0" Class="login100-form pa-2 rounded-3">
                    <div class="d-flex justify-content-center align-items-center mb-2" style="width: 100%; height: auto;">
                        <MudImage Class="center-image" Style="width:20%; height: auto" Src="imgs/no-image-icon-6.png" Alt="Icon"/>
                    </div>
                    <MudText Typo="Typo.body2" Style="color: red">@errorMessage</MudText>
                    <EditForm Model="Input">
                        <DataAnnotationsValidator/>
                        <MudTextField Class="my-5 mx-3" @bind-Value="@Input.UserName" For="@(() => Input.UserName)"
                                      Label="Tên đăng nhập" MaxLength="50" Variant="Variant.Outlined"/>
                        <MudTextField Class="mx-3" @bind-Value="@Input.Password" For="@(() => Input.Password)" Label="Mật khẩu"
                                      MaxLength="50" InputType="@passType" Adornment="Adornment.End" AdornmentIcon="@passIcon"
                                      OnAdornmentClick="ShowPass" Variant="Variant.Outlined"/>
                        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Style="padding-top: 20px">
                            <MudButton OnClick="HandlerLoginAsync" Style="text-transform: none; border-radius:20px !important" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                                Đăng nhập
                            </MudButton>
                        </MudStack>
                    </EditForm>
                </MudPaper>
            </div>
        </div>
    </div>
}

@code {
    private string UserName { get; set; }
    private string Password { get; set; }
    private bool RememberMe { get; set; }
}


@code {
    private bool isPageReady = false;
    private string? errorMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();


    bool isShowPass = false;
    InputType passType = InputType.Password;
    string passIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {

    }

    public void ShowPass()
    {
        if (isShowPass)
        {
            isShowPass = false;
            passType = InputType.Password;
            passIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            isShowPass = true;
            passType = InputType.Text;
            passIcon = Icons.Material.Filled.Visibility;
        }
        }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Tên đăng nhập không được để trống")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "Mật khẩu không được để trống")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }

    private async Task HandlerLoginAsync()
    {
        var client = Factory.CreateClient(ApiKey.BaseAddress);
        var loginRequest = new LoginRequest(Input.UserName, Input.Password);
        var data = loginRequest.EncodeJsonContent();
        try
        {
            var httpResponse = await client.PostAsync(ConstRequestUri.auLogin, data);
            if (httpResponse.IsSuccessStatusCode)
            {
                // save in local storgage
                var jwtResult = await httpResponse.Content.DecodeAsync<JwtResult>();
                await Js.InvokeVoidAsync("localStorage.setItem", "Token", jwtResult.AccessToken);
                await Js.InvokeVoidAsync("localStorage.setItem", "Refresh", jwtResult.RefreshToken);
                Navigation.NavigateTo("/admin");
                Snack.Add("Đăng nhập thành công", Severity.Success);
            }
            else
            {
                var errors = await httpResponse.Content.DecodeAsync<ErrorResponse>();
                Snack.Add(errors.Detail, Severity.Warning);
            }
            Snack.Add("Đăng nhập thành công", Severity.Success);
        }
        catch (Exception ex)
        {
            Snack.Add("Có lỗi trong quá trình đăng nhập", Severity.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await Js.InvokeAsync<string?>("localStorage.getItem", "Token");
            var client = Factory.CreateClient(ApiKey.BaseAddress);
            if (token is null)
            {
                isPageReady = true;
                StateHasChanged();
                return;
            }
            else
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                try
                {
                    var sampleResponse = await client.GetAsync("sample");
                    if (sampleResponse.IsSuccessStatusCode)
                    {
                        Navigation.NavigateTo("/admin");
                    }
                    else if (sampleResponse.StatusCode == HttpStatusCode.Unauthorized)
                    {
                        var refreshToken = await Js.InvokeAsync<string?>("localStorage.getItem", "Refresh");
                        if (refreshToken is null)
                        {
                            isPageReady = true;
                            StateHasChanged();
                            return;
                        }

                        var tokenResponse = await client.PostAsync(ConstRequestUri.auRefresh + $"?refreshToken={refreshToken}", null);
                        if (tokenResponse.IsSuccessStatusCode)
                        {
                            var jwtResult = await tokenResponse.Content.DecodeAsync<JwtResult>();
                            await Js.InvokeVoidAsync("localStorage.setItem", "Token", jwtResult.AccessToken);
                            await Js.InvokeVoidAsync("localStorage.setItem", "Refresh", jwtResult.RefreshToken);
                            Navigation.NavigateTo("/admin");
                        }
                        else
                        {
                            await Js.InvokeVoidAsync("localStorage.removeItem", "Token");
                            await Js.InvokeVoidAsync("localStorage.removeItem", "Refresh");
                            isPageReady = true;
                            StateHasChanged();
                        }
                    }
                    else
                    {
                        await Js.InvokeVoidAsync("localStorage.removeItem", "Token");
                        await Js.InvokeVoidAsync("localStorage.removeItem", "Refresh");
                        isPageReady = true;
                        StateHasChanged();
                        return;
                    }
                }
                catch (Exception)
                {
                    await Js.InvokeVoidAsync("localStorage.removeItem", "Token");
                    await Js.InvokeVoidAsync("localStorage.removeItem", "Refresh");
                    isPageReady = true;
                    StateHasChanged();
                    return;
                }
            }
        }
    }

}